package simulation.thread

import field.Island
import lifeform.animal.Animal
import simulation.IslandSimulation
import kotlin.system.exitProcess

class DisplayStatisticsTask : Runnable {
    @Volatile
    private var isTimeOver: Boolean = false

    companion object {
        @Volatile
        private var currentDay: Int = 1  // –î–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1

        fun getCurrentDay(): Int = currentDay
    }

    override fun run() {
        try {
            val timeNow = IslandSimulation.getInstance().getTimeNow()
            isTimeOver = checkTime(timeNow)

            printStats()

            if (isTimeOver) {
                println("\n----------------------------------\n–ö–æ–Ω–µ—Ü —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Å—Ç—Ä–æ–≤–∞...\n----------------------------------\n")
                IslandSimulation.getInstance().executorService?.shutdown()
                exitProcess(0)
            }

            currentDay++
        } catch (e: Exception) {
            println("–û—à–∏–±–∫–∞ –≤ DisplayStatisticsTask: ${e.message}")
            e.printStackTrace()
        }
    }

    private fun checkTime(timeNow: Long): Boolean {
        return timeNow / 60 >= 5
    }

    private fun printStats() {
        val island = Island.getInstance()
        val animals = island.getAllAnimals()
        val plantsCount = island.getAllPlants().size

        val aliveAnimals = animals.filter { it.isAlive }

        val animalOrder = listOf(
            "–ú–µ–¥–≤–µ–¥—å",
            "–í–æ–ª–∫",
            "–õ–∏—Å–∞",
            "–û—Ä–µ–ª",
            "–£–¥–∞–≤",
            "–ö–∞–±–∞–Ω",
            "–£—Ç–∫–∞",
            "–ú—ã—à—å",
            "–õ–æ—à–∞–¥—å",
            "–û–ª–µ–Ω—å",
            "–ö—Ä–æ–ª–∏–∫",
            "–ö–æ–∑–∞",
            "–û–≤—Ü–∞",
            "–ë—É–π–≤–æ–ª",
            "–ì—É—Å–µ–Ω–∏—Ü–∞"
        )

        val groupedAnimals = aliveAnimals.groupBy { it.name }

        val statsAnimals = animalOrder.mapNotNull { name ->
            val count = groupedAnimals[name]?.size ?: 0
            if (count > 0) "$name: $count" else null
        }

        val emojiGrid = buildEmojiGrid(animals, plantsCount, 60)

        val stats = """
        |==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –î–ï–ù–¨ $currentDay ====================
        |${statsAnimals.joinToString("\n")}
        |
        |–ñ–∏–≤–æ—Ç–Ω—ã—Ö –≤—Å–µ–≥–æ: ${aliveAnimals.count()}
        |–†–∞—Å—Ç–µ–Ω–∏–π –≤—Å–µ–≥–æ: $plantsCount
        |==============================================================
        |
        |$emojiGrid
        |
    """.trimMargin()

        println(stats)
    }

    private fun buildEmojiGrid(animals: List<Animal>, plantsCount: Int, rowLength: Int = 60): String {
        val plantEmoji = "üå±"
        val animalEmojiMap = mapOf(
            "–ö–∞–±–∞–Ω" to "üêó",
            "–ë—É–π–≤–æ–ª" to "üêÉ",
            "–ì—É—Å–µ–Ω–∏—Ü–∞" to "üêõ",
            "–û–ª–µ–Ω—å" to "ü¶å",
            "–£—Ç–∫–∞" to "ü¶Ü",
            "–ö–æ–∑–∞" to "üêê",
            "–õ–æ—à–∞–¥—å" to "üêé",
            "–ú—ã—à—å" to "üê≠",
            "–ö—Ä–æ–ª–∏–∫" to "üêá",
            "–û–≤—Ü–∞" to "üêë",
            "–ú–µ–¥–≤–µ–¥—å" to "üêª",
            "–û—Ä–µ–ª" to "ü¶Ö",
            "–õ–∏—Å–∞" to "ü¶ä",
            "–£–¥–∞–≤" to "üêç",
            "–í–æ–ª–∫" to "üê∫"
        )

        val plantEmojis = List(plantsCount.coerceAtMost(100)) { plantEmoji }
        val aliveAnimals = animals.filter { it.isAlive }
        val animalEmojis = aliveAnimals.map { animalEmojiMap[it.name] ?: " " }
        val allEmojis = plantEmojis + animalEmojis

        // –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ rowLength (—à–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏)
        val lines = allEmojis.chunked(rowLength)
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç ‚Äî –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —ç–º–æ–¥–∑–∏ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –º–µ–∂–¥—É –Ω–∏–º–∏
        return lines.joinToString(separator = "\n") { it.joinToString(separator = "") }
    }

}
